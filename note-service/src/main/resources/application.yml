server:
    port: ${SCRIBBLE_NOTE_SERVICE_PORT}
    error:
        include-stacktrace: never
spring:
    application:
        name: note-service
    security:
        oauth2:
            resourceserver:
                jwt:
                    issuer-uri: ${SCRIBBLE_AUTH_OAUTH2_RESOURCESERVER_JWT_ISSUER_URI}
    jackson:
        default-property-inclusion: non_null # to NOT include any null values in the json response
        time-zone: UTC
        serialization:
            WRITE_DATES_AS_TIMESTAMPS: 'false'


    datasource:
        url: jdbc:postgresql://notesdb:5432/notesdb
#        url: ${SCRIBBLE_DB_ENDPOINT}
        driverClassName: org.postgresql.Driver
        platform: postgres
        username: postgres
        password: postgres123
    jpa:
        hibernate:
            ddl-auto: update
        properties:
            hibernate:
                dialect: org.hibernate.dialect.PostgreSQLDialect
#                format_sql: 'true'
#        show-sql: 'true'

aws:
    cognito:
        connectionTimeout: '2000'
        userPoolId: ${SCRIBBLE_AUTH_AWS_COGNITO_USERPOOL_ID}
        jwk: ${SCRIBBLE_AUTH_AWS_COGNITO_JWK}
        clientId: ${SCRIBBLE_AUTH_AWS_COGNITO_CLIENT_ID}
        region: ${SCRIBBLE_AUTH_AWS_COGNITO_REGION}
        readTimeout: '2000'
    access-key: ${SCRIBBLE_AUTH_AWS_ACCESS_KEY}
    access-secret: ${SCRIBBLE_AUTH_AWS_SECRET_KEY}
    default-region: ${SCRIBBLE_AUTH_AWS_DEFAULT_REGION}

app:
    cors:
        allowedOrigins: http://localhost:4200 # Comma separated list of allowed origins


#Reason: The WARN level will only log warnings, errors, and critical issues related to Hibernate. This reduces the verbosity of logs and avoids performance impacts that can occur with DEBUG logging, especially in production where SQL logging can be sensitive and can generate a large volume of logs.
#    This ensures that only important messages like potential issues or problems with the ORM layer are logged, without the detailed SQL and parameter information.
#springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration: 'WARN'
#
#Reason: Setting this to WARN helps you capture any issues related to the auto-configuration of Spring Security while avoiding unnecessary logs that could clutter the production logs.
#    This will only log messages if there is a potential problem or misconfiguration within the UserDetailsServiceAutoConfiguration setup, rather than verbose info or debug logs.

logging:
    level:
        org:
            hibernate: 'WARN'
            springframework:
                boot:
                    autoconfigure:
                        security:
                            servlet:
                                UserDetailsServiceAutoConfiguration: 'WARN'



